//
//  TodayViewController.swift
//  EisenOK
//
//  Created by –Ø—Ä–æ—Å–ª–∞–≤  on 16.05.2018.
//  Copyright ¬© 2018 UkropSoft. All rights reserved.
//

import UIKit
import CoreData

class TodayViewController: UIViewController {
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Label (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
    @IBOutlet weak var labelCountUrgentImportant: UILabel!
    @IBOutlet weak var labelCountUrgentUnimportant: UILabel!
    @IBOutlet weak var labelCountInurgentImportant: UILabel!
    @IBOutlet weak var labelCountInurgentUnimportant: UILabel!
    
    
    @IBOutlet weak var addTaskVievButton: ANCustomView!
    
    @IBOutlet weak var viewUrgentImportant: UIView!
    @IBOutlet weak var viewUrgentUnimportant: UIView!
    @IBOutlet weak var viewInurgentImportant: UIView!
    @IBOutlet weak var viewInurgentUnimportant: UIView!
    
    
    var item = [Task]()
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∏–º–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    var categoryCountUrgentImportant : String = "–°—Ä–æ—á–Ω–æ - –í–∞–∂–Ω–æ "
    var categoryCountUrgentUnimportant : String = "–°—Ä–æ—á–Ω–æ - –ù–µ –≤–∞–∂–Ω–æ "
    var categoryCountInurgentImportant : String = "–ù–µ —Å—Ä–æ—á–Ω–æ - –í–∞–∂–Ω–æ "
    var categoryCountInurgentUnimportant : String = "–ù–µ —Å—Ä–æ—á–Ω–æ - –ù–µ –≤–∞–∂–Ω–æ "
    
    var StoredResults = [NSManagedObject]()
    

    override func viewDidLoad() {
        super.viewDidLoad()

        //self.tabBarController!.tabBar.layer.borderWidth = 0.50 // –≤—ã—Å–æ—Ç–∞ –±–∞—Ä–∞
        self.tabBarController!.tabBar.layer.borderColor = #colorLiteral(red: 0.9999960065, green: 1, blue: 1, alpha: 1)
        self.tabBarController?.tabBar.clipsToBounds = true
        
        //MARK: –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        //–ù–∞–∂–∞—Ç–∏–µ –°—Ä–æ—á–Ω–æ - –í–∞–∂–Ω–æ
        let tapUrgentImportant = UITapGestureRecognizer(target: self, action: #selector(handleTap1))
        viewUrgentImportant.addGestureRecognizer(tapUrgentImportant)
        //–ù–∞–∂–∞—Ç–∏–µ –°—Ä–æ—á–Ω–æ - –ù–µ –≤–∞–∂–Ω–æ
        let tapUrgentUnimportant = UITapGestureRecognizer(target: self, action: #selector(handleTap2))
        viewUrgentUnimportant.addGestureRecognizer(tapUrgentUnimportant)
        //–ù–∞–∂–∞—Ç–∏–µ –ù–µ —Å—Ä–æ—á–Ω–æ - –í–∞–∂–Ω–æ
        let tapInurgentImportant = UITapGestureRecognizer(target: self, action: #selector(handleTap3))
        viewInurgentImportant.addGestureRecognizer(tapInurgentImportant)
        //–ù–∞–∂–∞—Ç–∏–µ –ù–µ —Å—Ä–æ—á–Ω–æ - –ù–µ –≤–∞–∂–Ω–æ
        let tapInurgentUnimportant = UITapGestureRecognizer(target: self, action: #selector(handleTap4))
        viewInurgentUnimportant.addGestureRecognizer(tapInurgentUnimportant)
        
    }
    
    @objc func handleTap1() {
        
        print ("üëç –ù–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –°—Ä–æ—á–Ω–æ - –í–∞–∂–Ω–æ")

        let nameCategoryTap = categoryCountUrgentImportant
        performSegue(withIdentifier: "ShowTaskCategorySegue", sender: nameCategoryTap)
        
    }
    
    @objc func handleTap2() {
        
        print ("üëç –ù–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –°—Ä–æ—á–Ω–æ - –ù–µ –≤–∞–∂–Ω–æ")
        
        let nameCategoryTap = categoryCountUrgentUnimportant
        performSegue(withIdentifier: "ShowTaskCategorySegue", sender: nameCategoryTap)
        
    }
    
    @objc func handleTap3() {
        
        print ("üëç –ù–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ù–µ —Å—Ä–æ—á–Ω–æ - –í–∞–∂–Ω–æ")
        
        let nameCategoryTap = categoryCountInurgentImportant
        performSegue(withIdentifier: "ShowTaskCategorySegue", sender: nameCategoryTap)
        
    }
    
    @objc func handleTap4() {
        
        print ("üëç –ù–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ù–µ —Å—Ä–æ—á–Ω–æ - –ù–µ –≤–∞–∂–Ω–æ")
        
        let nameCategoryTap = categoryCountInurgentUnimportant
        performSegue(withIdentifier: "ShowTaskCategorySegue", sender: nameCategoryTap)
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        //MARK: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        labelCountUrgentImportant.text = String (fetchRequest(categoryName: categoryCountUrgentImportant))
        labelCountUrgentUnimportant.text = String (fetchRequest(categoryName: categoryCountUrgentUnimportant))
        labelCountInurgentImportant.text = String (fetchRequest(categoryName: categoryCountInurgentImportant))
        labelCountInurgentUnimportant.text = String (fetchRequest(categoryName: categoryCountInurgentUnimportant))

    }

    
    //MARK: –ú–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)
    func fetchRequest(categoryName : String ) -> Int {
        
        let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Task")
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞–∫–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É –∏—Å–∫–∞—Ç—å
        let predicate =  NSPredicate(format:"category == %@", categoryName)
        request.predicate = predicate
        
        do {
            let results =
                try context.fetch(request)
            
            StoredResults = results as! [NSManagedObject]
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \(categoryName) –ó–∞–¥–∞—á \(StoredResults.count)")
            
        } catch let error as NSError {
            print(" error executing fetchrequest  ", error)
        }
        //–í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let coutTask = StoredResults.count
        return coutTask
    }

    //–ö—Ä—É–≥–ª–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    @IBAction func addTask(_ sender: UIButton) {
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        addTaskVievButton.AnimateView()
        
    }

    
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        
        if let destination = segue.destination as? ShowTaskTodayCategoryViewController{
            
            if let selectNameCategory = sender as? String {
                destination.textToShow = selectNameCategory
                print ("üëç –ü–µ—Ä–µ–¥–∞–ª –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \(selectNameCategory)")
            }
        }
        
        
    }
    

}
